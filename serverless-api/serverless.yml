# Welcome to serverless. Read the docs
# https://serverless.com/framework/docs/

# Serverless.yml is the configuration the CLI
# uses to deploy your code to your provider of choice

# The `service` block is the name of the service
service: hashtag-lunch-review-backend

plugins:
  - serverless-plugin-typescript
  - serverless-dynamodb-local
  - serverless-offline
  - serverless-dotenv-plugin

# The `provider` block defines where your service will be deployed
provider:
  name: aws
  runtime: nodejs8.10
  region: eu-north-1
  stage: ${opt:stage, 'dev'}
  environment:
    STAGE_ENV: ${opt:stage, 'dev'}

  iamRoleStatements:
    - Effect: Allow
      Action:
        - dynamodb:DescribeTable
        - dynamodb:Query
        - dynamodb:Scan
        - dynamodb:GetItem
        - dynamodb:PutItem
        - dynamodb:UpdateItem
        - dynamodb:DeleteItem
      Resource: "arn:aws:dynamodb:eu-north-1:*:*"
# The `functions` block defines what code to deploy
functions:
  jwtVerify:
    handler: src/jwtverify.verify

  postPlaces:
    handler: src/places.post

    events:
      - http:
          authorizer:
            name: jwtVerify
            identitySource: method.request.header.Authorization
          path: places
          method: post
          cors: true

  getPlaces:
    handler: src/places.get

    events:
      - http:
          authorizer:
            name: jwtVerify
            identitySource: method.request.header.Authorization
          path: places
          method: get
          cors: true

  getPlaceById:
    handler: src/places.getById

    events:
      - http:
          authorizer:
            name: jwtVerify
            identitySource: method.request.header.Authorization
          path: places/{placeId}
          method: get
          cors: true

  postReviews:
    handler: src/reviews.postReviews

    events:
      - http:
          authorizer:
            name: jwtVerify
            identitySource: method.request.header.Authorization
          path: reviews
          method: post
          cors: true

  putReviews:
    handler: src/reviews.putReview

    events:
      - http:
          authorizer:
            name: jwtVerify
            identitySource: method.request.header.Authorization
          path: reviews/{reviewId}
          method: put
          cors: true
  
  getReviews:
    handler: src/reviews.getReviews

    events:
      - http:
          authorizer:
            name: jwtVerify
            identitySource: method.request.header.Authorization
          path: reviews
          method: get
          cors: true

  getReviewsByPlace:
    handler: src/reviews.getReviewsByPlace

    events:
      - http:
          authorizer:
            name: jwtVerify
            identitySource: method.request.header.Authorization
          path: places/{placeId}/reviews
          method: get
          cors: true
          request:
            parameters:
              paths:
                id: true

  putUser:
    handler: src/users.putUser

    events:
      - http:
          authorizer:
            name: jwtVerify
            identitySource: method.request.header.Authorization
          path: users/{googleUserId}
          method: put
          cors: true
          request:
            parameters:
              paths:
                id: true

  getUser:
    handler: src/users.getUser

    events:
      - http:
          authorizer:
            name: jwtVerify
            identitySource: method.request.header.Authorization
          path: users/{googleUserId}
          method: get
          cors: true
          request:
            parameters:
              paths:
                id: true

  getRatings:
    handler: src/ratings.getPlacesWithRatings

    events:
      - http:
          authorizer:
            name: jwtVerify
            identitySource: method.request.header.Authorization
          path: ratings
          method: get
          cors: true

  getPlaceWithRatingsByPlaceId:
    handler: src/ratings.getPlaceWithRating

    events:
      - http:
          authorizer:
            name: jwtVerify
            identitySource: method.request.header.Authorization
          path: places/{placeId}/rating
          method: get
          cors: true  
          request:
            parameters:
              paths:
                id: true      
          

custom:
  serverless-offline:
    port: 4000